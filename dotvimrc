" == Initial process == {{{1

if &compatible
  set nocompatible
endif

" dein自体の自動インストール
let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
if !isdirectory(s:dein_repo_dir)
  call system('git clone https://github.com/Shougo/dein.vim ' . shellescape(s:dein_repo_dir))
endif

execute 'set runtimepath^=' . s:dein_repo_dir

" change leader key \ to Space
let mapleader = "\<Space>"

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  
  let s:toml = expand('~/.config/nvim/rc/dein.toml')
  let s:lazy_toml = expand('~/.config/nvim/rc/dein_lazy.toml')
  call dein#load_toml(s:toml, {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})
  
  call dein#end()
  call dein#save_state()
endif

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

filetype plugin indent on
syntax enable

" }}}

" == Basic settings == {{{1

" change color normal mode or insert mode
au InsertEnter * hi StatusLine guifg=Blue guibg=Yellow gui=none ctermfg=Blue ctermbg=Yellow cterm=none
au InsertLeave * hi StatusLine guifg=Blue guibg=DarkGray   gui=none ctermfg=Blue ctermbg=DarkGray cterm=none

" enable marker 
set foldmethod=marker

" set color & font
set background=dark
colorscheme spring-night

" set font
set guifont=Source\ Code\ Pro\ Light\ for\ Powerline:h16

" swap file dir
set directory=~/.vim/backup

" backup file dir
set backupdir=~/.vim/backup

" undo file dir
set undodir=~/.vim/backup

" quick edit vimrc
nnoremap <Space>. :<C-u>tabedit $MYVIMRC<CR>
nnoremap <Space>, :<C-u>source $MYVIMRC<CR>

" yank to clipboard 
if has('nvim')
  set clipboard=unnamed
else
	set clipboard=unnamed,autoselect
endif

" color
hi Pmenu ctermbg=4
hi PmenuSel ctermbg=8
hi CursorLine guifg=#E19972 ctermfg=216 ctermbg=132 guibg=4

" diff
set diffopt=vertical 

" indent
set expandtab     " タブ入力を複数の空白入力に置き換える
set tabstop=2     " 画面上でタブ文字が占める幅
set shiftwidth=2  " 自動インデントでずれる幅
set softtabstop=2 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set autoindent    " 改行時に前の行のインデントを継続する
set smartindent   " 改行時に入力された行の末尾に合わせて次の行のインデントを増減する

augroup MyAutoCmd
  autocmd!
augroup END

" }}}

" == key bind == {{{1

" CTRL-hjklでウィンドウ移動
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h
if has('nvim')
	nmap <BS> <C-W>h
endif

"<space>j, <space>kで画面送り
nnoremap <space>j <c-f><cr><cr>
nnoremap <space>k <c-b><cr><cr>

"表示行単位で移動(snippet展開対策済み)
nnoremap j gj
nnoremap k gk
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

"Easy escaping to normal mode
call arpeggio#load()
Arpeggio inoremap jk  <Esc>

"Resize vsplit
nnoremap <c-i> :vertical resize +5<cr>
nnoremap <c-d> :vertical resize -5<cr>

" change leader key \ to , 
let mapleader = "\<Space>"

" replace ; : for us keyboard
nnoremap ; :
nnoremap : ;

" tab 
nnoremap [Tab]  <Nop>
nmap     t 			[Tab]
" Tab jump
for n in range(1, 9)
	execute 'nnoremap <silent> [Tab]'.n ':<C-u>tabnext'.n.'<CR>'
endfor
" t1で１番左のタブ、t2 で1番左から2番目のタブにジャンプ

" tc 新しいタブを一番右に作る 
nnoremap [Tab]c :tablast <bar> tabnew<CR>
" tx タブを閉じる
nnoremap [Tab]x :tabclose<CR>
" tn 次のタブ
nnoremap [Tab]n :tabnext<CR>
" tp 前のタブ
nnoremap [Tab]p :tabprevious<CR>

" tags
nnoremap <C-]> g<C-]> 

" neovim terminal mode
tnoremap <silent> <ESC> <C-\><C-n>

" }}}

" == Encoding settings == {{{1

if &encoding !=? 'utf-8'
	set encoding=utf-8
	set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis,cp932
	set fileformats=unix,dos,mac
endif

" }}}
 
" == Plugin Settings == {{{1

" NERDTree {{{

nnoremap <silent><C-b> :NERDTreeToggle<cr>

" }}}

" smartchr {{{ 

inoremap <expr> = smartchr#loop('=', ' = ', ' == ', ' === ') 
inoremap <expr> , smartchr#loop(',', ', ')

"}}}

" lightline {{{

let g:lightline = {
			\ 'colorscheme': 'wombat', 
      \ 'active': {
      \   'left': [
      \    ['mode', 'paste'],
      \    ['readonly', 'filename', 'modified'],
      \    [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] 
      \   ],
      \   'right': [ [ 'jafix' ], 
      \              [ 'lineinfo' ],  
      \							 [ 'fileformat',  'fileencoding',  'filetype' ] ]
      \ },
			\ 'component': {
			\		'readonly': '%{&filetype=="help"?"":&readonly?"🔒":""}', 
			\		'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
			\ }
      \ }
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }

" }}}

" open-browser.vim {{{

let g:openbrowser_open_filepath_in_vim = 0
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
command! OpenBrowserCurrent execute "OpenBrowser" expand("%:p")

" }}}

" Vim-EasyMotion {{{

map f <Plug>(easymotion-fl)
nmap s <Plug>(easymotion-s)
vmap s <Plug>(easymotion-s)

" }}}

" sonictemplate-vim {{{

let g:sonictemplate_vim_template_dir = $HOME. '/.vim/template'

" }}}

" {{{ vim-test

let test#strategy = "neoterm"
let g:test#preserve_screen = 1
if !empty(glob("docker-compose.yml"))
  let test#ruby#rspec#executable = 'docker-compose run spring rspec'
end
let test#javascript#mocha#executable = "NODE_ENV=test $(yarn bin)/mocha -r babel-register -r ./app/front/src/test/setup.js"


nnoremap <leader>n :TestNearest<CR>
nnoremap <leader>T :TestFile<CR>
nnoremap <leader>a :TestSuite<CR>
nnoremap <leader>l :TestLast<CR>

" }}}

" {{{ dash.vim

nmap <silent> <leader>da <Plug>DashSearch
let g:dash_map = {
      \ 'ruby' : ['ruby',  'rubygems',  'rails', 'eruby'], 
      \ 'javascript' : ['javascript', 'jquery', 'jqueryui', 'jquerym', 'bootstrap', 'foundation', 'lodash', 'underscore', 'nodejs', 'express', 'jasmine', 'sinon', 'chai'], 
			\ }

" }}}

" {{{ vim-indent-guides

let g:indent_guides_start_level = 2
let g:indent_guides_color_change_percent = 30
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  guibg=red   ctermbg=3
hi IndentGuidesEven guibg=green ctermbg=4

" }}}

" {{{ ALE

" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストとQuickFixには表示しない
" 出てると結構うざいしQuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 有効にするlinter
let g:ale_linters = {
      \ 'javascript': ['eslint', 'flow'],
      \ 'typescript': ['tslint'],
      \ }
let g:ale_fixers = {
      \ 'javascript': ['prettier-eslint'],
      \ 'typescript': ['prettier'],
      \ 'ruby': ['rubocop'],
      \ }
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_statusline_format = ['E%d', 'W%d', 'ok']
let g:ale_set_loclist = 0
"let g:ale_javascript_prettier_options = '--single-quote --trailing-comma es5'

" エラー行にジャンプ
nmap <silent> <C-P> <Plug>(ale_previous)
nmap <silent> <C-N> <Plug>(ale_next)

" }}}

" {{{ winresizer

let g:winresizer_start_key = '<C-Y>'

" }}}

" {{{ neoterm

let g:neoterm_autoscroll=1
let g:neoterm_default_mod='belowright'

" }}}

" {{{ vim-javascript

let g:javascript_plugin_flow = 1

" }}}

" {{{ vim-gitgutter

let g:gitgutter_highlight_lines = 1
set updatetime=250

" }}}

" }}}

" }}}

" {{{ == Language Settings == 

augroup Html
	nnoremap <Leader>p :OpenBrowserCurrent<CR>
augroup END

augroup Javascript
  inoremap <expr> = smartchr#loop('=', ' = ', ' == ', ' === ', '=>')
  au FileType javascript setlocal foldmethod=syntax
  autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
augroup END

" }}}
