#===========
# common develop
[[plugins]]
repo = 'Shougo/deoplete.nvim'
build = ':UpdateRemotePlugins'
on_i = 1
hook_add = ''' " {{{
  let g:deoplete#enable_at_startup = 1
 " }}} '''
hook_source = ''' " {{{
  let g:deoplete#auto_complete_delay = 100
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 1
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 1000

  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ deoplete#manual_complete()
  function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction"}}}

  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

  " inoremap <expr><C-g> deoplete#undo_completion()
  " <C-l>: redraw candidates
  inoremap <expr><C-g> deoplete#refresh()
  inoremap <silent><expr><C-l> deoplete#complete_common_string()

  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#cancel_popup() . "\<CR>"
  endfunction

  inoremap <expr> '  pumvisible() ? deoplete#close_popup() : "'"

" }}} '''
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['ruby', 'eruby', 'swift', 'javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
depends = ['async.vim', 'deoplete-vim-lsp']
hook_source = ''' " {{{
  if executable('solargraph')
    au User lsp_setup call lsp#register_server({
          \ 'name': 'solargraph',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
          \ 'initialization_options': {"diagnostics": "true"},
          \ 'whitelist': ['ruby'],
          \ })
  endif
  if executable('sourcekit-lsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'sourcekit-lsp',
        \ 'cmd': {server_info->['sourcekit-lsp']},
        \ 'whitelist': ['swift'],
        \ })
  endif
  if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'javascript support using typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'package.json'))},
        \ 'whitelist': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx'],
        \ })
  endif
" }}} '''
[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
depends = 'deoplete.nvim'
hook_source = ''' " {{{
  let g:deoplete#sources#vim_lsp#show_info = 1
" }}} '''
[[plugins]]
repo = 'ryanolsonx/vim-lsp-swift'
on_ft = 'swift'
[[plugins]]
repo = 'ryanolsonx/vim-lsp-javascript'
on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']

#===========
# denite / unite
[[plugins]]
repo = 'Shougo/neomru.vim'
on_if = 1
on_source = 'denite.nvim'
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = 'denite.nvim'
[[plugins]]
repo = '5t111111/denite-rails'
on_source = 'denite.nvim'
[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'
[[plugins]]
repo = 'chemzqm/denite-git'
on_source = 'denite.nvim'
[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> ;e :<C-u>Denite junkfile:new junkfile<CR>
'''
[[plugins]]
repo = 'Shougo/denite.nvim'
build = ':UpdateRemotePlugins'
on_cmd = 'Denite'
hook_add = ''' " {{{
  nnoremap <silent> /  :<C-u>Denite line<CR>
  nnoremap <silent> *  :<C-u>DeniteCursorWord line<CR>
  nnoremap <silent> ;r :<C-u>Denite register neoyank<CR>
  xnoremap <silent> ;r :<C-u>Denite -default-action=replace register neoyank<CR>

  nnoremap <silent> <Leader>dm :<C-u>Denite file_mru<CR>
  nnoremap <silent> <Leader>dr :<C-u>Denite file/rec<CR>
  nnoremap <silent> <Leader>dg :<C-u>Denite grep<CR>
  nnoremap <silent> <Leader>db :<C-u>Denite buffer<CR>

  " ghq
  nnoremap <silent> ;g :<C-u>Denite ghq<CR>

  " git
  nnoremap <silent> <Leader>gs :<C-u>Denite gitstatus<CR>
  nnoremap <silent> <Leader>gb :<C-u>Denite gitbranch<CR>
  nnoremap <silent> <Leader>gl :<C-u>Denite gitlog<CR>
  nnoremap <silent> <Leader>gc :<C-u>Denite gitchanged<CR>

  " rails
  nnoremap <silent> <Leader>rr :<C-u>Denite rails:dwim<Return>
  nnoremap <silent> <Leader>rm :<C-u>Denite rails:model<Return>
  nnoremap <silent> <Leader>rc :<C-u>Denite rails:controller<Return>
  nnoremap <silent> <Leader>rv :<C-u>Denite rails:view<Return>
  nnoremap <silent> <Leader>rh :<C-u>Denite rails:helper<Return>
  nnoremap <silent> <Leader>rt :<C-u>Denite rails:test<Return>
  nnoremap <silent> <Leader>rs :<C-u>Denite rails:spec<Return>
" }}} '''
hook_source = ''' " {{{
  augroup DeniteSettings
    autocmd!
    autocmd FileType denite call s:denite_my_settings()
  augroup END

  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  augroup DeniteFilterSettings
    autocmd!
    autocmd FileType denite-filter call s:denite_filter_my_settings()
  augroup END

  function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer> <C-j>
    \ <Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
    inoremap <silent><buffer> <C-k>
    \ <Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
    inoremap <silent><buffer><expr> <C-c>
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c>
    \ denite#do_map('quit')
    inoremap <silent><buffer><expr> <C-[>
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-[>
    \ denite#do_map('quit')
  endfunction

  " Change denite default options
  call denite#custom#option('_', {
      \ 'prompt': '$ ',
      \ 'cached_filter': v:true,
      \ 'cursor_shape': v:true,
      \ 'cursor_wrap': v:true,
      \ 'statusline': v:false,
      \ 'highlight_filter_background': 'DeniteFilter',
      \ 'highlight_matched_char': 'Underlined',
      \ 'split': 'floating',
      \ })
  let s:denite_win_width_percent = 0.85
  let s:denite_win_height_percent = 0.7

  augroup DeniteDetectSize
    autocmd!
    autocmd VimResized * call <SID>denite_detect_size()
  augroup END

  function! s:denite_detect_size() abort
    call denite#custom#option('_', {
     \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
     \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
     \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
     \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
     \ })
  endfunction
  call s:denite_detect_size()

  " search
  call denite#custom#var('file_rec', 'command',
        \ ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading'])

  call denite#custom#source(
      \ 'file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
  call denite#custom#source(
      \ 'file_rec,grep', 'matchers', ['matcher_cpsm'])
  call denite#custom#source('grep', 'matchers',
      \ ['matcher_ignore_globs', 'matcher_cpsm'])
  call denite#custom#source('file_mru', 'converters',
      \ ['converter_relative_word'])
" }}} '''
[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'


#===========
# snippet
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'honza/vim-snippets'
[[plugins]]
repo = 'bentayloruk/vim-react-es6-snippets'
on_ft = ['javascript', 'javascript.jsx']
[[plugins]]
repo = 'mmozuras/snipmate-mocha'
on_ft = ['javascript', 'javascript.jsx']
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'vim-snippets', 'vim-react-es6-snippets', 'context_filetype.vim', 'snipmate-mocha']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = ''' " {{{
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1

  let g:neosnippet#scope_aliases = {}
  let g:neosnippet#scope_aliases['javascript'] = 'javascript,javascript.jsx'
  let g:neosnippet#scope_aliases['ruby'] = 'ruby,rails,eruby'

  let g:neosnippet#snippets_directory = [
    \ '~/.vim/snippets'
    \ ]

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
" }}} '''


#===========
# lang

# {{{ Ruby
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'eruby']
hook_source = ''' " {{{
  let g:rails_default_file='config/database.yml'
  let g:rails_level=4
  let g:rails_mappings=1
  let g:rails_modlines=0
  function! SetUpRailsSettings()
  	nnoremap <buffer><Leader>r :R<CR>
  	nnoremap <buffer><Leader>a :A<CR>
  	nnoremap <buffer><Leader>m :Emodel<CR>
  	nnoremap <buffer><Leader>c :Econtroller<CR>
  	nnoremap <buffer><Leader>v :Eview<CR>
  	nnoremap <buffer><Leader>p :Epreview<CR>
  	nnoremap <buffer><Leader>t :Eunittest<CR>
  endfunction

  aug MyAutoCmd
  	au User Rails call SetUpRailsSettings()
  aug END

  aug RailsDictSetting
  	au!
  aug END
" }}} '''
[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby', 'eruby']
[[plugins]]
repo = 'tpope/vim-bundler'
on_ft = ['ruby', 'eruby']
[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['ruby', 'elixir', 'slim']
# }}}

# {{{ JavaScript / TypeScript
[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript']
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']
[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx', 'typescript']
[[plugins]]
repo = 'styled-components/vim-styled-components'
on_ft = ['javascript', 'javascript.jsx']
[[plugins]]
repo = 'wokalski/autocomplete-flow'
on_ft = ['javascript', 'javascript.jsx']
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
setlocal iskeyword+=$
setlocal iskeyword+=-
'''
[[plugins]]
repo = 'neovim/node-host'
build = 'npm install -g neovim'
on_ft = ['javascript', 'javascript.jsx', 'typescript']
# }}}

# {{{ markdown
[[plugins]]
repo = 'rhysd/github-complete.vim'
on_ft = 'markdown'
[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
hook_source = ''' " {{{
  let g:previm_disable_default_css = 1
  let g:previm_custom_css_path = '~/.vim/template/previm/markdown.css'
" }}} '''
# }}}

# {{{ html
[[plugins]]
repo = 'greyblake/vim-preview'
on_ft = ['html', 'markdown']
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'markdown']
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'markdown', 'javascript', 'javascript.jsx', 'typescript', 'typescript.tsx','css', 'vue', 'eruby', 'slim']
# }}}

# {{{ css
[[plugins]]
repo = 'tell-k/vim-browsereload-mac'
on_ft = ['css', 'vue']
hook_source = ''' " {{{

let g:returnApp = "Terminal"
let g:returnAppFlag = 1

" }}} '''
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'vue']
[[plugins]]
repo = 'AtsushiM/sass-compile.vim'
on_ft = ['css', 'vue']
hook_source = ''' " {{{

let g:sass_compile_auto = 0
let g:sass_compile_file = ['scss', 'sass']

" }}} '''
[[plugins]]
repo = 'stephenway/postcss.vim'
on_ft = ['css', 'vue']
# }}}

# {{{ toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# }}}

# {{{ swift
[[plugins]]
repo = 'keith/swift.vim'
on_ft = 'swift'
# }}}
