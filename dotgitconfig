[core]
  excludesfile = ~/.gitignore
  filemode     = false
[user]
  name  = ukoasis
  email = loveoasisforever@gmail.com
[alias]
  s   = status -s
  st  = status
  sh  = show
  so  = remote show origin
  v   = remote -v
  ad  = add
  aa  = add -A
  ci  = commit
  ca  = commit -a          # modifiedなファイルを全てstageへ
  cam = commit -a --amend  # 直前のcommitを修正
  co  = checkout
  cb  = checkout -b        # branch切ってcheckoutする

  # branch関連
  ft = fetch
  fp = fetch --prune
  br = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  pl = pull
  up = pull --rebase       # pull rebase
  ps = push origin master

  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges

  # logをtree表示
  lal       = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-all   = log --no-merges --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  tr        = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'

  # diff関連
  df  = diff
  di  = diff
  dw  = diff --color-words   # 単語単位でいろつけてdiff
  dc  = diff --cached        # addされているものとのdiff

  # grep関連
  gr   = grep
  gn   = grep -n

  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"

  # mergeの際にconflictが起きたファイルをadd
  add-unmerged  = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
